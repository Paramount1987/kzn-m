/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$game-name: 'game';
$game-x: 0px;
$game-y: 45px;
$game-offset-x: 0px;
$game-offset-y: -45px;
$game-width: 22px;
$game-height: 15px;
$game-total-width: 92px;
$game-total-height: 60px;
$game-image: '../img/sprites/sprite.png';
$game: (0px, 45px, 0px, -45px, 22px, 15px, 92px, 60px, '../img/sprites/sprite.png', 'game', );
$mobiles-name: 'mobiles';
$mobiles-x: 0px;
$mobiles-y: 0px;
$mobiles-offset-x: 0px;
$mobiles-offset-y: 0px;
$mobiles-width: 46px;
$mobiles-height: 40px;
$mobiles-total-width: 92px;
$mobiles-total-height: 60px;
$mobiles-image: '../img/sprites/sprite.png';
$mobiles: (0px, 0px, 0px, 0px, 46px, 40px, 92px, 60px, '../img/sprites/sprite.png', 'mobiles', );
$music-name: 'music';
$music-x: 75px;
$music-y: 0px;
$music-offset-x: -75px;
$music-offset-y: 0px;
$music-width: 17px;
$music-height: 17px;
$music-total-width: 92px;
$music-total-height: 60px;
$music-image: '../img/sprites/sprite.png';
$music: (75px, 0px, -75px, 0px, 17px, 17px, 92px, 60px, '../img/sprites/sprite.png', 'music', );
$play-name: 'play';
$play-x: 51px;
$play-y: 0px;
$play-offset-x: -51px;
$play-offset-y: 0px;
$play-width: 19px;
$play-height: 19px;
$play-total-width: 92px;
$play-total-height: 60px;
$play-image: '../img/sprites/sprite.png';
$play: (51px, 0px, -51px, 0px, 19px, 19px, 92px, 60px, '../img/sprites/sprite.png', 'play', );
$game-2x-name: 'game@2x';
$game-2x-x: 0px;
$game-2x-y: 90px;
$game-2x-offset-x: 0px;
$game-2x-offset-y: -90px;
$game-2x-width: 44px;
$game-2x-height: 30px;
$game-2x-total-width: 184px;
$game-2x-total-height: 120px;
$game-2x-image: '../img/sprites/sprite@2x.png';
$game-2x: (0px, 90px, 0px, -90px, 44px, 30px, 184px, 120px, '../img/sprites/sprite@2x.png', 'game@2x', );
$mobiles-2x-name: 'mobiles@2x';
$mobiles-2x-x: 0px;
$mobiles-2x-y: 0px;
$mobiles-2x-offset-x: 0px;
$mobiles-2x-offset-y: 0px;
$mobiles-2x-width: 92px;
$mobiles-2x-height: 80px;
$mobiles-2x-total-width: 184px;
$mobiles-2x-total-height: 120px;
$mobiles-2x-image: '../img/sprites/sprite@2x.png';
$mobiles-2x: (0px, 0px, 0px, 0px, 92px, 80px, 184px, 120px, '../img/sprites/sprite@2x.png', 'mobiles@2x', );
$music-2x-name: 'music@2x';
$music-2x-x: 150px;
$music-2x-y: 0px;
$music-2x-offset-x: -150px;
$music-2x-offset-y: 0px;
$music-2x-width: 34px;
$music-2x-height: 34px;
$music-2x-total-width: 184px;
$music-2x-total-height: 120px;
$music-2x-image: '../img/sprites/sprite@2x.png';
$music-2x: (150px, 0px, -150px, 0px, 34px, 34px, 184px, 120px, '../img/sprites/sprite@2x.png', 'music@2x', );
$play-2x-name: 'play@2x';
$play-2x-x: 102px;
$play-2x-y: 0px;
$play-2x-offset-x: -102px;
$play-2x-offset-y: 0px;
$play-2x-width: 38px;
$play-2x-height: 38px;
$play-2x-total-width: 184px;
$play-2x-total-height: 120px;
$play-2x-image: '../img/sprites/sprite@2x.png';
$play-2x: (102px, 0px, -102px, 0px, 38px, 38px, 184px, 120px, '../img/sprites/sprite@2x.png', 'play@2x', );
$spritesheet-width: 92px;
$spritesheet-height: 60px;
$spritesheet-image: '../img/sprites/sprite.png';
$spritesheet-sprites: ($game, $mobiles, $music, $play, );
$spritesheet: (92px, 60px, '../img/sprites/sprite.png', $spritesheet-sprites, );
$retina-spritesheet-width: 184px;
$retina-spritesheet-height: 120px;
$retina-spritesheet-image: '../img/sprites/sprite@2x.png';
$retina-spritesheet-sprites: ($game-2x, $mobiles-2x, $music-2x, $play-2x, );
$retina-spritesheet: (184px, 120px, '../img/sprites/sprite@2x.png', $retina-spritesheet-sprites, );

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
$game-group-name: 'game';
$game-group: ('game', $game, $game-2x, );
$mobiles-group-name: 'mobiles';
$mobiles-group: ('mobiles', $mobiles, $mobiles-2x, );
$music-group-name: 'music';
$music-group: ('music', $music, $music-2x, );
$play-group-name: 'play';
$play-group: ('play', $play, $play-2x, );
$retina-groups: ($game-group, $mobiles-group, $music-group, $play-group, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
@mixin sprite-background-size($sprite) {
  $sprite-total-width: nth($sprite, 7);
  $sprite-total-height: nth($sprite, 8);
  background-size: $sprite-total-width $sprite-total-height;
}

@mixin retina-sprite($retina-group) {
  $normal-sprite: nth($retina-group, 2);
  $retina-sprite: nth($retina-group, 3);
  @include sprite($normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    @include sprite-image($retina-sprite);
    @include sprite-background-size($normal-sprite);
  }
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}

/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
@mixin retina-sprites($retina-groups) {
  @each $retina-group in $retina-groups {
    $sprite-name: nth($retina-group, 1);
    .#{$sprite-name} {
      @include retina-sprite($retina-group);
    }
  }
}
